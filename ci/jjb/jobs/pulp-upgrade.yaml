# This job test Pulp upgrading from a X.Y to a X.Y+1 version on many Operating
# Systems.

- job-template:
    name: 'pulp-upgrade-{pulp_version}-{upgrade_pulp_version}-{os}'
    node: '{os}-os'
    properties:
        - qe-ownership
    scm:
        - pulp-ci-github
    triggers:
        - timed: 'H H * * 1,4'
    wrappers:
        - ansicolor
        - config-file-provider:
            files:
                - file-id: rhn_credentials
                  variable: RHN_CREDENTIALS
        - inject:
            properties-content: |
                OS={os}
                PULP_PASSWORD=admin
                PULP_USER=admin
                PULP_VERSION={pulp_version}
                UPGRADE_PULP_VERSION={upgrade_pulp_version}
    builders:
        - shell: |
            echo "PULP_VERSION=$(cut -d- -f1 <<< ${{PULP_VERSION}})" > pulp_version.properties
            echo "PULP_BUILD=$(cut -d- -f2 <<< ${{PULP_VERSION}})" >> pulp_version.properties
            echo "UPGRADE_PULP_VERSION=$(cut -d- -f1 <<< ${{UPGRADE_PULP_VERSION}})" >> pulp_version.properties
            echo "UPGRADE_PULP_BUILD=$(cut -d- -f2 <<< ${{UPGRADE_PULP_VERSION}})" >> pulp_version.properties
        - inject:
            properties-file: pulp_version.properties
        - fix-hostname
        - shell:
            !include-raw-escape:
                - 'ssh-setup.sh'
                - 'pulp-install.sh'
                - 'pre-upgrade.sh'
        - shell: |
            export ANSIBLE_CONFIG="${{PWD}}/ci/ansible/ansible.cfg"
            ansible-playbook --connection local -i hosts ci/ansible/pulp_server_upgrade.yaml \
                -e "upgrade_pulp_build=${{UPGRADE_PULP_BUILD}}" \
                -e "upgrade_pulp_version=${{UPGRADE_PULP_VERSION}}"
        # Update PULP_VERSION to the UPGRADE_PULP_VERSION to be able to reuse
        # includes from automation
        - shell: |
            echo "PULP_VERSION=${{UPGRADE_PULP_VERSION}}" > pulp_version.properties
        - inject:
            properties-file: pulp_version.properties
        - shell:
            !include-raw-escape:
                - 'post-upgrade.sh'
                - 'pulp-smash-parameters.sh'
        - inject:
            properties-file: parameters.txt
        - trigger-builds:
            - project:
                - pulp-smash-runner
              block: true
              predefined-parameters: |
                  PULP_SMASH_SYSTEM_HOSTNAME=$PULP_SMASH_SYSTEM_HOSTNAME
                  PULP_SMASH_PULP_VERSION=$PULP_SMASH_PULP_VERSION
              block-thresholds:
                  build-step-failure-threshold: never
                  unstable-threshold: never
                  failure-threshold: never
              parameter-factories:
                  - factory: binaryfile
                    parameter-name: PRIVATE_KEY
                    file-pattern: pulp_server_key
                    no-files-found-action: FAIL
                  - factory: binaryfile
                    parameter-name: CA_CERT
                    file-pattern: cacert.pem
                    no-files-found-action: FAIL
        - copyartifact:
            project: pulp-smash-runner
            which-build: specific-build
            build-number: ${{TRIGGERED_BUILD_NUMBER_PULP_SMASH_RUNNER}}
            flatten: true
        - capture-logs
    publishers:
      - postbuildscript:
          script-only-if-succeeded: False
          script-only-if-failed: False
          builders:
            - shell: |
                if [[ "${{OS}}" =~ "rhel" ]]; then
                    sudo subscription-manager unregister
                fi
      - archive:
          artifacts: "*.tar.gz"
          allow-empty: true
      - junit:
          results: junit-report.xml
      - email-notify-owners
      - delete-slave-node
