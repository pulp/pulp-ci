- job:
    name: 'unittest-pulp-pr'
    defaults: ci-workflow-runtest
    project-type: matrix
    node: 'master'
    axes:
      - axis:
          type: label-expression
          name: node-type
          values:
            - f22-np
            - f23-np
            - rhel5-np
            - rhel6-np
            - rhel7-np
    parameters:
        - string:
            name: sha1
            default: ''
            description: |
                The hash or refname of the branch to build: for example: origin/pr/9/head
        - matrix-combinations:
            name: MATRIX_AXIS
    # enable nodepool monitoring
    properties:
    - github:
        url: https://github.com/pulp/pulp/
    - zeromq-event
    scm:
        - git:
            url: 'https://github.com/pulp/pulp.git'
            refspec: '+refs/pull/*:refs/remotes/origin/pr/*'
            branches:
              - "${sha1}"
            basedir: pulp
            skip-tag: True
            wipe-workspace: false
    triggers:
      - github-pull-request:
          admin-list:
            - pulpbot
          org-list:
            - pulp
          # Poll once per minute since our jenkins isn't public and web hooks aren't an option
          cron: '* * * * *'
          trigger-phrase: 'ok test'
          allow-whitelist-orgs-as-admins: true
          # only-trigger-phrase: true
          white-list-target-branches:
            - master
            - 2.6-dev
            - 2.6-testing
            - 2.6-release
            - 2.7-dev
            - 2.7-testing
            - 2.7-release
    builders:
        - shell: |
            #!/bin/bash
            echo "Setting up after source control extract"
            # env
            OS_NAME=$(lsb_release -si)
            OS_VERSION=$(lsb_release -sr | cut -f1 -d.)
            # setenforce 0
            cd $WORKSPACE

            set -x

            # get the base pulp version
            PULP_VERSION=$(grep -Po "(^[\d]+\.[\d]+)" pulp/rel-eng/packages/pulp)
            echo "PULP BASE VERSION: ${PULP_VERSION}"

            if [ "$OS_NAME" == "RedHatEnterpriseServer" ]; then
                REPO_URL="https://repos.fedorapeople.org/repos/pulp/pulp/testing/automation/${PULP_VERSION}/stage/\$releasever/\$basearch/"
            else
                REPO_URL="https://repos.fedorapeople.org/repos/pulp/pulp/testing/automation/${PULP_VERSION}/stage/fedora-\$releasever/\$basearch/"
            fi

            cat > pulp-deps.repo<< EndOfMessage
            [pulp-deps]
            name=pulp-deps
            baseurl=${REPO_URL}
            enabled=1
            gpgcheck=0
            EndOfMessage

            sudo mv pulp-deps.repo /etc/yum.repos.d/

            # only do this until we have a full deps build
            if [ "$OS_VERSION" != "5" ]; then
              sudo yum -y install python-mongoengine qpid-tools  python-rhsm --nogpgcheck

              echo "Setting up virtualenv-wrapper"
              export WORKON_HOME=$HOME/.virtualenvs
              export PIP_VIRTUALENV_BASE=$WORKON_HOME
              export VIRTUALENV_USE_DISTRIBUTE=true
              export PIP_RESPECT_VIRTUALENV=true
              source /usr/bin/virtualenvwrapper.sh
              # Build a virtualenv to hold the test requirements
              mkvirtualenv --system-site-packages test
              pip install --upgrade six
              pip install -r $WORKSPACE/pulp/test_requirements.txt

              # If rhel6
              if [ "$OS_VERSION" == "6" ]; then
                sudo yum -y install Django14  --nogpgcheck
              else
                sudo yum -y install python-django  --nogpgcheck
              fi
            fi

            rm -rf $WORKSPACE/test
            mkdir -p $WORKSPACE/test
            rm -rf $WORKSPACE/coverage
            mkdir -p $WORKSPACE/coverage

            echo "Setting up pulp-server"
            cd $WORKSPACE/pulp

            if [ "$OS_NAME" == "Fedora" ]; then
              rpmspec -q --queryformat '[%{REQUIRENEVRS}\n]' *.spec | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo dnf -y install --nogpgcheck python-pulp-devel
            fi
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION"  \< "7" ]; then
              rpmquery --specfile pulp.spec --queryformat '[%{REQUIRES}\n]' | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo yum -y install --nogpgcheck python-pulp-devel
            fi
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION"  \> "6" ]; then
              rpmspec -q --queryformat '[%{REQUIRENEVRS}\n]' *.spec | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo yum -y install --nogpgcheck python-pulp-devel
            fi

            for setup in `find . -name setup.py`; do
                pushd `dirname $setup`;
                sudo python setup.py develop;
                popd;
            done;
            sudo python ./pulp-dev.py -I

            cd $WORKSPACE/pulp
            export PYTHONUNBUFFERED=1
            set -x
            python ./run-tests.py --enable-coverage --with-xunit --xunit-file ../test/pulp_test.xml --with-xcoverage --xcoverage-file ../coverage/pulp_coverage.xml

    publishers:
      - cobertura:
          report-file: 'coverage/*.xml'
          fail-no-reports: true
          targets:
            - lines:
                healthy: 84
                unhealthy: 0.0
                failing: 0.0
      # Publish a pretty graph of the test results
      - junit:
          results: 'test/*.xml'
          keep-long-stdio: true
          test-stability: true
      - mark-node-offline

- job-template:
    name: 'unittest-{pulp_plugin}-pr'
    defaults: ci-workflow-runtest
    project-type: matrix
    node: 'master'
    axes:
      - axis:
          type: label-expression
          name: node-type
          values: '{obj:unittest_platforms}'
    parameters:
        - string:
            name: sha1
            default: ''
            description: |
                The hash or refname of the branch to build: for example: origin/pr/9/head
        - matrix-combinations:
            name: MATRIX_AXIS
    properties:
      - github:
          url: https://github.com/pulp/{pulp_plugin}/
      - zeromq-event
    scm:
        - git:
            url: 'https://github.com/pulp/{pulp_plugin}.git'
            refspec: '+refs/pull/*:refs/remotes/origin/pr/*'
            branches:
              - "${{sha1}}"
            skip-tag: True
            basedir: plugin
            wipe-workspace: false
    triggers:
      - github-pull-request:
          admin-list:
            - pulpbot
          org-list:
            - pulp
          # Poll once per minute since our jenkins isn't public and web hooks aren't an option
          cron: '* * * * *'
          trigger-phrase: 'ok test'
          allow-whitelist-orgs-as-admins: true
          # only-trigger-phrase: true
          white-list-target-branches: '{obj:unittest_branches}'
    builders:
        - shell: |
            #!/bin/bash
            # Set up and install the base pulp
            # double up the {{}} to deal with string format of the shell script


            sudo mv pulp-deps.repo /etc/yum.repos.d/
            set -x
            OS_NAME=$(lsb_release -si)
            OS_VERSION=$(lsb_release -sr | cut -f1 -d.)

            # Get the required pulp server
            pushd plugin
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION"  \< "7" ]; then
              # unfortunately rpmspec doesn't work on rhel 5 & 6 so we have to use the older rpmquery
              server_requires=$(rpmquery --requires --specfile *.spec | grep pulp-server)
              requires_minus_spaces=$(echo $server_requires | sed 's/[[:space:]]//g')
              PULP_VERSION=$(echo $requires_minus_spaces | sed -r 's/pulp-server(>=|==|=)([0-9]+\.[0-9+]).*/\2/')
            else
              server_requires=$(rpmspec -P *.spec | grep pulp-server)
              requires_minus_spaces=$(echo $server_requires | sed 's/[[:space:]]//g')
              PULP_VERSION=$(echo $requires_minus_spaces | sed -r 's/Requires:pulp-server(>=|==|=)([0-9]+\.[0-9+]).*/\2/')
            fi

            popd
            echo $PULP_VERSION
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ]; then
                REPO_URL="https://repos.fedorapeople.org/repos/pulp/pulp/testing/automation/$PULP_VERSION/stage/\$releasever/\$basearch/"
            else
                REPO_URL="https://repos.fedorapeople.org/repos/pulp/pulp/testing/automation/$PULP_VERSION/stage/fedora-\$releasever/\$basearch/"
            fi

            cat > pulp-deps.repo<< EndOfMessage
            [pulp-deps]
            name=pulp-deps
            baseurl=$REPO_URL
            enabled=1
            gpgcheck=0
            EndOfMessage

            sudo mv pulp-deps.repo /etc/yum.repos.d/
            cd plugin
            if [ "$OS_NAME" == "Fedora" ]; then
              rpmspec -q --queryformat '[%{{REQUIRENEVRS}}\n]' *.spec | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo dnf -y install --nogpgcheck @pulp-server-qpid @pulp-admin @pulp-consumer python-pulp-devel
              sudo dnf -y remove pulp-rpm\* python-pulp-rpm\* pulp-puppet\* python-pulp-puppet\*
            fi
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION"  \< "7" ]; then
              rpmquery --specfile *.spec --queryformat '[%{{REQUIRENEVRS}}\n]' | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo yum -y install --nogpgcheck @pulp-server-qpid @pulp-admin @pulp-consumer python-pulp-devel
              sudo yum -y remove pulp-rpm\* python-pulp-rpm\* pulp-puppet\* python-pulp-puppet\*
            fi
            if [ "$OS_NAME" == "RedHatEnterpriseServer" ] && [ "$OS_VERSION"  \> "6" ]; then
              rpmspec -q --queryformat '[%{{REQUIRENEVRS}}\n]' *.spec | grep -v "/.*" | grep -v "python-pulp.* " | grep -v "pulp.*" | uniq | xargs -d "\n" sudo yum -y install --nogpgcheck @pulp-server-qpid @pulp-admin @pulp-consumer python-pulp-devel
              sudo yum -y remove pulp-rpm\* python-pulp-rpm\* pulp-puppet\* python-pulp-puppet\*
            fi
            if [ "$OS_VERSION" != "5" ]; then
              echo "Setting up virtualenv-wrapper"
              export WORKON_HOME=$HOME/.virtualenvs
              export PIP_VIRTUALENV_BASE=$WORKON_HOME
              export VIRTUALENV_USE_DISTRIBUTE=true
              export PIP_RESPECT_VIRTUALENV=true
              source /usr/bin/virtualenvwrapper.sh
              # Build a virtualenv to hold the test requirements
              mkvirtualenv --system-site-packages test
              pip install --upgrade six
              pip install -r $WORKSPACE/plugin/test_requirements.txt
            fi

            mkdir -p $WORKSPACE/test
            mkdir -p $WORKSPACE/coverage

            echo "Setting up the plugin"
            cd $WORKSPACE/plugin
            for setup in `find . -name setup.py`; do
                pushd `dirname $setup`;
                sudo python setup.py develop;
                popd;
            done;
            sudo python ./pulp-dev.py -I

            cd $WORKSPACE/plugin
            export PYTHONUNBUFFERED=1

            # This is heinous but necessary as the unit tests require access to /etc/pulp
            sudo chown -R jenkins:jenkins /etc/pulp

            python ./run-tests.py --enable-coverage --with-xunit --xunit-file ../test/pulp_test.xml --with-xcoverage --xcoverage-file ../coverage/pulp_coverage.xml

    publishers:
      - cobertura:
          report-file: 'coverage/*.xml'
          fail-no-reports: true
          targets:
            - lines:
                healthy: {min_coverage}
                unhealthy: 0.0
                failing: 0.0
      # Publish a pretty graph of the test results
      - junit:
          results: 'test/*.xml'
          keep-long-stdio: true
          test-stability: true
      - mark-node-offline

- job-group:
    name: 'unittest-plugins-pr-jobs'
    jobs:
      - 'unittest-{pulp_plugin}-pr'

